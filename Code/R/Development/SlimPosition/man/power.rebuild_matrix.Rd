% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power.rebuild_matrix.R
\name{power.rebuild_matrix}
\alias{power.rebuild_matrix}
\title{@export}
\usage{
power.rebuild_matrix(x, power = 1, k = 0, ...)
}
\description{
@title \code{power.rebuild_matrix}: raise matrix to a power and rebuild lower rank version
}
\details{
@description \code{power.rebuild_matrix} takes in a matrix and will compute raise that matrix to some arbitrary power via the singular value decomposition.
 Additionally, the matrix can be computed for a lower rank estimate of the matrix.

@param x data matrix
 @param power the power to raise \code{x} by (e.g., 2 is squared)
 @param k the number of components to retain in order to build a lower rank estimate of \code{x}
 @param ... parameters to pass through to \code{\link{tolerance.svd}}

@return
 The (possibly lower rank) raised to an arbitrary \code{power} version of \code{x}

@seealso \code{\link{tolerance.svd}} and \code{\link{invert.rebuild_matrix}}

@examples
 hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
 X <- hilbert(9)[, 1:6]
 X.power_1 <- power.rebuild_matrix(X)
 X / X.power_1

## other examples.
 X.power_2 <- power.rebuild_matrix(X,power=2)
 X.power_negative.1.div.2 <- power.rebuild_matrix(X,power=-1/2)

@author Derek Beaton

@keywords multivariate, diagonalization, eigen, pseudo-inverse, Moore-Penrose
}
